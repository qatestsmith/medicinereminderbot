from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
import logging
from database import Database
from handlers.auth import check_user_access
from utils.helpers import get_timezone_list, format_medicine_list

# Conversation states
(SELECTING_TIMEZONE, ADDING_MEDICINE_NAME, ADDING_MEDICINE_TIME, 
 ADDING_MEDICINE_DOSAGE, CONFIRMING_MEDICINE, ADDING_MORE_TIMES,
 EDITING_MEDICINE_SELECT, EDITING_MEDICINE_ACTION) = range(8)

class BotHandlers:
    def __init__(self, database: Database):
        self.db = database
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        if not await check_user_access(update, context):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # Check if user exists
        user = self.db.get_user(user_id)
        
        if not user:
            # New user - show timezone selection
            await self.show_timezone_selection(update, context)
            return SELECTING_TIMEZONE
        else:
            # Existing user - show main menu
            await self.show_main_menu(update, context)
            return ConversationHandler.END
    
    async def show_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show timezone selection for new users"""
        timezones = get_timezone_list()
        keyboard = []
        
        for city_name in timezones.keys():
            keyboard.append([KeyboardButton(f"{city_name} UTC+2")])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üåç –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ú–µ–¥–∏—á–Ω–æ–≥–æ –ü–æ–º—ñ—á–Ω–∏–∫–∞!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:",
            reply_markup=reply_markup
        )
    
    async def handle_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle timezone selection"""
        selected = update.message.text
        timezone_name = selected.split()[0]  # Extract city name
        
        timezones = get_timezone_list()
        if timezone_name in timezones:
            user_id = update.effective_user.id
            username = update.effective_user.username
            timezone = timezones[timezone_name]
            
            # Save user to database
            if self.db.add_user(user_id, username, timezone):
                await update.message.reply_text(
                    f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timezone_name}\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!"
                )
                await self.show_main_menu(update, context)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
                return SELECTING_TIMEZONE
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É."
            )
            return SELECTING_TIMEZONE
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main menu"""
        keyboard = [
            [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏")],
            [KeyboardButton("üìã –ú–æ—ó –ª—ñ–∫–∏")],
            [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–∫–∏")],
            [KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=reply_markup
        )
    
    async def handle_add_medicine(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start adding medicine process"""
        if not await check_user_access(update, context):
            return ConversationHandler.END
        
        keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üíä –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫—ñ–≤\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ª—ñ–∫—ñ–≤:",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_NAME
    
    async def handle_medicine_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine name input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        medicine_name = update.message.text.strip()
        if not medicine_name or len(medicine_name) > 100:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ù–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return ADDING_MEDICINE_NAME
        
        # Store medicine name in context
        context.user_data['medicine_name'] = medicine_name
        
        # Show time input options
        keyboard = [
            [KeyboardButton("–†–∞–Ω–æ–∫ 08:00"), KeyboardButton("–î–µ–Ω—å 14:00"), KeyboardButton("–í–µ—á—ñ—Ä 20:00")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üíä {medicine_name}\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏: 08:00, 14:30, 20:15\n\n"
            "–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –≥–æ—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_TIME
    
    async def handle_medicine_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine time input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        time_input = update.message.text
        
        # Handle preset times
        if time_input == "–†–∞–Ω–æ–∫ 08:00":
            time_str = "08:00"
        elif time_input == "–î–µ–Ω—å 14:00":
            time_str = "14:00"
        elif time_input == "–í–µ—á—ñ—Ä 20:00":
            time_str = "20:00"
        else:
            from utils.helpers import validate_time_format
            time_str = validate_time_format(time_input)
        
        if not time_str:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 08:00"
            )
            return ADDING_MEDICINE_TIME
        
        # Store time in context
        context.user_data['medicine_time'] = time_str
        
        keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üíä {context.user_data['medicine_name']}\n"
            f"üïê {time_str}\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –¥–æ–∑—É (–ø—Ä–∏–∫–ª–∞–¥: 1 —Ç–∞–±–ª–µ—Ç–∫–∞):",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_DOSAGE
    
    async def handle_medicine_dosage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine dosage input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        from utils.helpers import validate_dosage
        dosage = validate_dosage(update.message.text)
        
        if not dosage:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∑–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 2 –∫–∞–ø—Å—É–ª–∏, 5 –º–ª"
            )
            return ADDING_MEDICINE_DOSAGE
        
        # Store dosage in context
        context.user_data['medicine_dosage'] = dosage
        
        # Show confirmation
        keyboard = [
            [KeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏")],
            [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏"), KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è:\n\n"
            f"üíä {context.user_data['medicine_name']}\n"
            f"üïê {context.user_data['medicine_time']}\n"
            f"üíä {dosage}",
            reply_markup=reply_markup
        )
        return CONFIRMING_MEDICINE
    
    async def handle_medicine_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine confirmation"""
        choice = update.message.text
        
        if choice == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        elif choice == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏":
            # Go back to name input
            keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üíä –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫—ñ–≤\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ª—ñ–∫—ñ–≤:",
                reply_markup=reply_markup
            )
            return ADDING_MEDICINE_NAME
        elif choice == "‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏":
            # Save to database
            user_id = update.effective_user.id
            medicine_id = self.db.add_medicine(
                user_id, 
                context.user_data['medicine_name']
            )
            
            if medicine_id:
                success = self.db.add_reminder(
                    medicine_id,
                    context.user_data['medicine_time'],
                    context.user_data['medicine_dosage']
                )
                
                if success:
                    keyboard = [
                        [KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")],
                        [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        "‚úÖ –õ—ñ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                        "–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —á–∞—Å –¥–ª—è —Ü–∏—Ö –ª—ñ–∫—ñ–≤?",
                        reply_markup=reply_markup
                    )
                    return ADDING_MORE_TIMES
                else:
                    await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    await self.show_main_menu(update, context)
                    return ConversationHandler.END
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                await self.show_main_menu(update, context)
                return ConversationHandler.END
    
    async def handle_adding_more_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle adding more reminder times"""
        choice = update.message.text
        
        if choice == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" or choice == "–ù—ñ":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        elif choice == "–¢–∞–∫":
            # Continue with same medicine, add another time
            keyboard = [
                [KeyboardButton("–†–∞–Ω–æ–∫ 08:00"), KeyboardButton("–î–µ–Ω—å 14:00"), KeyboardButton("–í–µ—á—ñ—Ä 20:00")],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üíä {context.user_data['medicine_name']}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —â–µ –æ–¥–∏–Ω —á–∞—Å:",
                reply_markup=reply_markup
            )
            return ADDING_MEDICINE_TIME
        else:
            await self.show_main_menu(update, context)
            return ConversationHandler.END
    
    async def handle_show_medicines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user's medicines"""
        if not await check_user_access(update, context):
            return
        
        user_id = update.effective_user.id
        medicines = self.db.get_user_medicines(user_id)
        
        message = format_medicine_list(medicines)
        
        keyboard = [
            [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏"), KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ")],
            [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        help_text = (
            "‚ùì –î–æ–ø–æ–º–æ–≥–∞\n\n"
            "üîπ –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏ - –¥–æ–¥–∞—î –Ω–æ–≤—ñ –ª—ñ–∫–∏ –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏\n"
            "üîπ –ú–æ—ó –ª—ñ–∫–∏ - –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ª—ñ–∫–∏\n"
            "üîπ –ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–∫–∏ - –¥–æ–∑–≤–æ–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª—è—Ç–∏ –ª—ñ–∫–∏\n\n"
            "üìã –§–æ—Ä–º–∞—Ç–∏ –≤–≤–æ–¥—É:\n"
            "‚Ä¢ –ß–∞—Å: 08:00, 14:30, 20:15\n"
            "‚Ä¢ –î–æ–∑–∞: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 2 –∫–∞–ø—Å—É–ª–∏, 5 –º–ª\n\n"
            "üíä –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å."
        )
        
        keyboard = [[KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle conversation cancellation"""
        await self.show_main_menu(update, context)
        return ConversationHandler.END
    
    async def handle_unknown(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle unknown messages"""
        if not await check_user_access(update, context):
            return
        
        # Check for main menu buttons
        text = update.message.text
        
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏":
            return await self.handle_add_medicine(update, context)
        elif text == "üìã –ú–æ—ó –ª—ñ–∫–∏":
            await self.handle_show_medicines(update, context)
        elif text == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –ª—ñ–∫–∏":
            # TODO: Implement medicine editing
            await update.message.reply_text("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
            await self.show_main_menu(update, context)
        elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            await self.handle_help(update, context)
        elif text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await self.show_main_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é."
            )
            await self.show_main_menu(update, context)