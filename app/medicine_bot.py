#!/usr/bin/env python3
import asyncio
import logging
import sys
import threading
import time
from datetime import datetime
import pytz
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes
from database import Database
from handlers.auth import check_user_access
from utils.helpers import (
    load_bot_token, load_config, setup_logging, get_timezone_list, 
    format_medicine_list, validate_time_format, validate_dosage, format_reminder_message
)

# Conversation states
(SELECTING_TIMEZONE, ADDING_MEDICINE_NAME, ADDING_MEDICINE_TIME, 
 ADDING_MEDICINE_DOSAGE, CONFIRMING_MEDICINE, ADDING_MORE_TIMES, 
 CHANGING_TIMEZONE, DELETING_MEDICINE_SELECT, DELETING_REMINDER_SELECT,
 CONFIRMING_DELETION, CONFIRMING_DELETE_ALL) = range(11)

class MedicineBot:
    def __init__(self):
        # Setup logging
        setup_logging()
        self.logger = logging.getLogger(__name__)
        
        # Load configuration
        self.config = load_config()
        bot_token = load_bot_token()
        
        if not bot_token:
            self.logger.error("Bot token not found. Please check config/bot_token.txt")
            sys.exit(1)
        
        # Initialize components
        self.db = Database()
        self.application = (
            Application.builder()
            .token(bot_token)
            .job_queue(None)  # Disable job queue to avoid weak reference issue
            .read_timeout(30)
            .write_timeout(30)
            .connect_timeout(30)
            .pool_timeout(30)
            .build()
        )
        
        # Setup handlers
        self.setup_handlers()
        
        # Reminder system
        self.reminder_thread = None
        self.reminder_running = False
        
        self.logger.info("Medicine Reminder Bot initialized")
    
    def setup_handlers(self):
        """Setup all bot handlers"""
        
        # Conversation handler for adding medicines
        add_medicine_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', self.start_command),
                MessageHandler(filters.Regex('^‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏$'), self.handle_add_medicine),
                MessageHandler(filters.Regex('^‚ûï –î–æ–¥–∞—Ç–∏ —â–µ$'), self.handle_add_medicine),
                MessageHandler(filters.Regex('^üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å$'), self.handle_change_timezone),
                MessageHandler(filters.Regex('^üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–∫–∏$'), self.handle_delete_medicine),
                MessageHandler(filters.Regex('^üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ª—ñ–∫–∏$'), self.handle_delete_medicine),
                MessageHandler(filters.Regex('^‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –ª—ñ–∫–∏$'), self.handle_delete_all_medicines)
            ],
            states={
                SELECTING_TIMEZONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_timezone_selection)
                ],
                ADDING_MEDICINE_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_medicine_name)
                ],
                ADDING_MEDICINE_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_medicine_time)
                ],
                ADDING_MEDICINE_DOSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_medicine_dosage)
                ],
                CONFIRMING_MEDICINE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_medicine_confirmation)
                ],
                ADDING_MORE_TIMES: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_adding_more_times)
                ],
                CHANGING_TIMEZONE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_timezone_change_selection)
                ],
                DELETING_MEDICINE_SELECT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_medicine_selection_for_deletion)
                ],
                DELETING_REMINDER_SELECT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_reminder_selection_for_deletion)
                ],
                CONFIRMING_DELETION: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_deletion_confirmation)
                ],
                CONFIRMING_DELETE_ALL: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_delete_all_confirmation)
                ]
            },
            fallbacks=[
                MessageHandler(filters.Regex('^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$'), self.handle_cancel),
                CommandHandler('cancel', self.handle_cancel)
            ]
        )
        
        # Add handlers to application
        self.application.add_handler(add_medicine_handler)
        
        # Other message handlers
        self.application.add_handler(MessageHandler(
            filters.Regex('^üìã –ú–æ—ó –ª—ñ–∫–∏$'), 
            self.handle_show_medicines
        ))
        
        self.application.add_handler(MessageHandler(
            filters.Regex('^‚ùì –î–æ–ø–æ–º–æ–≥–∞$'), 
            self.handle_help
        ))
        
        # Catch-all handler for unknown messages
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.handle_unknown
        ))
        
        self.logger.info("Bot handlers configured")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        if not await check_user_access(update, context):
            return
        
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        # Check if user exists
        user = self.db.get_user(user_id)
        
        if not user:
            # New user - show timezone selection
            await self.show_timezone_selection(update, context)
            return SELECTING_TIMEZONE
        else:
            # Existing user - show main menu
            await self.show_main_menu(update, context)
            return ConversationHandler.END
    
    async def show_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show timezone selection for new users"""
        timezones = get_timezone_list()
        keyboard = []
        
        timezone_labels = {
            "–í—ñ–¥–µ–Ω—å": "–í—ñ–¥–µ–Ω—å UTC+1/+2",
            "–ö–∏—ó–≤": "–ö–∏—ó–≤ UTC+2/+3", 
            "–•–∞—Ä–∫—ñ–≤": "–•–∞—Ä–∫—ñ–≤ UTC+2/+3",
            "–°—ñ–µ—Ç–ª": "–°—ñ–µ—Ç–ª UTC-8/-7",
            "–°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫": "–°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫ UTC+3"
        }
        
        for city_name in timezones.keys():
            label = timezone_labels.get(city_name, f"{city_name}")
            keyboard.append([KeyboardButton(label)])
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            "üåç –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ú–µ–¥–∏—á–Ω–æ–≥–æ –ü–æ–º—ñ—á–Ω–∏–∫–∞!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:",
            reply_markup=reply_markup
        )
    
    async def handle_timezone_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle timezone selection"""
        selected = update.message.text
        timezone_name = selected.split()[0]  # Extract city name
        
        timezones = get_timezone_list()
        if timezone_name in timezones:
            user_id = update.effective_user.id
            username = update.effective_user.username
            timezone = timezones[timezone_name]
            
            # Save user to database
            if self.db.add_user(user_id, username, timezone):
                await update.message.reply_text(
                    f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {timezone_name}\n\n"
                    "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º!"
                )
                await self.show_main_menu(update, context)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
                return SELECTING_TIMEZONE
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É."
            )
            return SELECTING_TIMEZONE
    
    async def handle_change_timezone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle timezone change request"""
        if not await check_user_access(update, context):
            return ConversationHandler.END
        
        # Get current user timezone
        user_id = update.effective_user.id
        user = self.db.get_user(user_id)
        
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        current_tz = user['timezone']
        # Find city name for current timezone
        timezones = get_timezone_list()
        current_city = None
        for city, tz in timezones.items():
            if tz == current_tz:
                current_city = city
                break
        
        # Show timezone selection
        timezone_labels = {
            "–í—ñ–¥–µ–Ω—å": "–í—ñ–¥–µ–Ω—å UTC+1/+2",
            "–ö–∏—ó–≤": "–ö–∏—ó–≤ UTC+2/+3", 
            "–•–∞—Ä–∫—ñ–≤": "–•–∞—Ä–∫—ñ–≤ UTC+2/+3",
            "–°—ñ–µ—Ç–ª": "–°—ñ–µ—Ç–ª UTC-8/-7",
            "–°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫": "–°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫ UTC+3"
        }
        
        keyboard = []
        for city_name, tz_name in timezones.items():
            label = timezone_labels.get(city_name, city_name)
            if tz_name == current_tz:
                keyboard.append([KeyboardButton(f"‚úÖ {label} (–ø–æ—Ç–æ—á–Ω–∏–π)")])
            else:
                keyboard.append([KeyboardButton(label)])
        
        keyboard.append([KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        await update.message.reply_text(
            f"üåç –ó–º—ñ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É\n\n"
            f"–ü–æ—Ç–æ—á–Ω–∏–π: {current_city or '–ù–µ–≤—ñ–¥–æ–º–æ'}\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:",
            reply_markup=reply_markup
        )
        return CHANGING_TIMEZONE
    
    async def handle_timezone_change_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle new timezone selection"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        selected = update.message.text
        # Remove checkmark and "(–ø–æ—Ç–æ—á–Ω–∏–π)" if present
        selected = selected.replace("‚úÖ ", "").replace(" (–ø–æ—Ç–æ—á–Ω–∏–π)", "")
        timezone_name = selected.split()[0]  # Extract city name
        
        timezones = get_timezone_list()
        if timezone_name in timezones:
            user_id = update.effective_user.id
            username = update.effective_user.username
            new_timezone = timezones[timezone_name]
            
            # Update user timezone in database
            if self.db.add_user(user_id, username, new_timezone):
                await update.message.reply_text(
                    f"‚úÖ –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {timezone_name}\n\n"
                    "–í—Å—ñ –≤–∞—à—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–µ–ø–µ—Ä –±—É–¥—É—Ç—å –Ω–∞–¥—Ö–æ–¥–∏—Ç–∏ –∑–∞ –Ω–æ–≤–∏–º —á–∞—Å–æ–º."
                )
                await self.show_main_menu(update, context)
                return ConversationHandler.END
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
                return CHANGING_TIMEZONE
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É."
            )
            return CHANGING_TIMEZONE
    
    async def handle_delete_medicine(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine deletion request"""
        if not await check_user_access(update, context):
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        medicines = self.db.get_user_medicines(user_id)
        
        if not medicines:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ª—ñ–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            )
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        # Create medicine list for selection
        keyboard = []
        for i, medicine in enumerate(medicines, 1):
            reminder_count = len([r for r in medicine['reminders'] if r['active']])
            keyboard.append([KeyboardButton(f"{i}. {medicine['name']} ({reminder_count} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å)")])
        
        keyboard.append([KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")])
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        # Store medicines in context for later use
        context.user_data['medicines_for_deletion'] = medicines
        
        await update.message.reply_text(
            "üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–∫—ñ–≤\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –ª—ñ–∫–∏, —è–∫—ñ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏:",
            reply_markup=reply_markup
        )
        return DELETING_MEDICINE_SELECT
    
    async def handle_medicine_selection_for_deletion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine selection for deletion"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        try:
            # Parse selection (e.g., "1. Aspirin (2 –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å)")
            selection_text = update.message.text
            medicine_index = int(selection_text.split('.')[0]) - 1
            
            medicines = context.user_data.get('medicines_for_deletion', [])
            if 0 <= medicine_index < len(medicines):
                selected_medicine = medicines[medicine_index]
                context.user_data['selected_medicine'] = selected_medicine
                
                active_reminders = [r for r in selected_medicine['reminders'] if r['active']]
                
                if len(active_reminders) <= 1:
                    # Only one or no reminders - delete entire medicine
                    context.user_data['deletion_type'] = 'medicine'
                    
                    await update.message.reply_text(
                        f"üóëÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n\n"
                        f"–í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–∫–∏:\n"
                        f"üíä {selected_medicine['name']}\n\n"
                        f"–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü–∏—Ö –ª—ñ–∫—ñ–≤.\n\n"
                        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è?",
                        reply_markup=ReplyKeyboardMarkup([
                            [KeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏"), KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                        ], resize_keyboard=True, one_time_keyboard=True)
                    )
                    return CONFIRMING_DELETION
                else:
                    # Multiple reminders - ask what to delete
                    keyboard = []
                    
                    # Option to delete entire medicine
                    keyboard.append([KeyboardButton(f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ª—ñ–∫–∏ '{selected_medicine['name']}'")])
                    
                    # Options to delete individual reminders
                    for reminder in active_reminders:
                        keyboard.append([KeyboardButton(
                            f"üïê –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {reminder['time']} - {reminder['dosage']}"
                        )])
                    
                    keyboard.append([KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")])
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                    
                    await update.message.reply_text(
                        f"üóëÔ∏è –©–æ –≤–∏–¥–∞–ª–∏—Ç–∏?\n\n"
                        f"üíä {selected_medicine['name']} –º–∞—î {len(active_reminders)} –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:\n\n" +
                        "\n".join([f"üïê {r['time']} - {r['dosage']}" for r in active_reminders]) + "\n\n"
                        "–û–±–µ—Ä—ñ—Ç—å —â–æ –≤–∏–¥–∞–ª–∏—Ç–∏:",
                        reply_markup=reply_markup
                    )
                    return DELETING_REMINDER_SELECT
            else:
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
                return DELETING_MEDICINE_SELECT
                
        except (ValueError, IndexError):
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
            return DELETING_MEDICINE_SELECT
    
    async def handle_reminder_selection_for_deletion(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle reminder selection for deletion"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        selected_medicine = context.user_data.get('selected_medicine')
        if not selected_medicine:
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        selection_text = update.message.text
        
        if selection_text.startswith("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ª—ñ–∫–∏"):
            # Delete entire medicine
            context.user_data['deletion_type'] = 'medicine'
            
            await update.message.reply_text(
                f"üóëÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n\n"
                f"–í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –ª—ñ–∫–∏:\n"
                f"üíä {selected_medicine['name']}\n\n"
                f"–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü–∏—Ö –ª—ñ–∫—ñ–≤.\n\n"
                f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è?",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏"), KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                ], resize_keyboard=True, one_time_keyboard=True)
            )
            return CONFIRMING_DELETION
        
        elif selection_text.startswith("üïê –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"):
            # Delete specific reminder
            try:
                # Parse time from "üïê –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è 08:00 - 1 —Ç–∞–±–ª–µ—Ç–∫–∞"
                time_part = selection_text.split("üïê –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è ")[1]
                reminder_time = time_part.split(" - ")[0]
                
                # Find the reminder with this time
                selected_reminder = None
                for reminder in selected_medicine['reminders']:
                    if reminder['time'] == reminder_time and reminder['active']:
                        selected_reminder = reminder
                        break
                
                if selected_reminder:
                    context.user_data['deletion_type'] = 'reminder'
                    context.user_data['selected_reminder'] = selected_reminder
                    
                    await update.message.reply_text(
                        f"üóëÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n\n"
                        f"–í–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n"
                        f"üíä {selected_medicine['name']}\n"
                        f"üïê {selected_reminder['time']} - {selected_reminder['dosage']}\n\n"
                        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è?",
                        reply_markup=ReplyKeyboardMarkup([
                            [KeyboardButton("‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏"), KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
                        ], resize_keyboard=True, one_time_keyboard=True)
                    )
                    return CONFIRMING_DELETION
                else:
                    await update.message.reply_text("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    return DELETING_REMINDER_SELECT
                    
            except (IndexError, ValueError):
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
                return DELETING_REMINDER_SELECT
        
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
            return DELETING_REMINDER_SELECT
    
    async def handle_deletion_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle deletion confirmation"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        if update.message.text != "‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏":
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
            return CONFIRMING_DELETION
        
        user_id = update.effective_user.id
        deletion_type = context.user_data.get('deletion_type')
        selected_medicine = context.user_data.get('selected_medicine')
        
        if deletion_type == 'medicine' and selected_medicine:
            # Delete entire medicine
            success = self.db.delete_medicine(selected_medicine['id'], user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –õ—ñ–∫–∏ '{selected_medicine['name']}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!\n"
                    f"–í—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü–∏—Ö –ª—ñ–∫—ñ–≤ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–µ–Ω–æ."
                )
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ª—ñ–∫—ñ–≤.")
        
        elif deletion_type == 'reminder':
            # Delete specific reminder
            selected_reminder = context.user_data.get('selected_reminder')
            if selected_reminder:
                success = self.db.delete_reminder(selected_reminder['id'], user_id)
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!\n"
                        f"üíä {selected_medicine['name']}\n"
                        f"üïê {selected_reminder['time']} - {selected_reminder['dosage']}"
                    )
                else:
                    await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
            else:
                await update.message.reply_text("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.")
        
        # Clear context and return to main menu
        context.user_data.clear()
        await self.show_main_menu(update, context)
        return ConversationHandler.END
    
    async def handle_delete_all_medicines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle delete all medicines request"""
        if not await check_user_access(update, context):
            return ConversationHandler.END
        
        user_id = update.effective_user.id
        medicines = self.db.get_user_medicines(user_id)
        
        if not medicines:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ª—ñ–∫—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
            )
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        total_medicines = len(medicines)
        total_reminders = sum(len([r for r in medicine['reminders'] if r['active']]) for medicine in medicines)
        
        await update.message.reply_text(
            f"‚ö†Ô∏è –£–í–ê–ì–ê! –ù–ï–ë–ï–ó–ü–ï–ß–ù–ê –î–Ü–Ø!\n\n"
            f"–í–∏ –∑–±–∏—Ä–∞—î—Ç–µ—Å—è –í–ò–î–ê–õ–ò–¢–ò –í–°–Ü –≤–∞—à—ñ –ª—ñ–∫–∏:\n"
            f"üìä –í—Å—å–æ–≥–æ –ª—ñ–∫—ñ–≤: {total_medicines}\n"
            f"üìä –í—Å—å–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å: {total_reminders}\n\n"
            f"‚ö†Ô∏è –¶–ï –î–Ü–Ø –ù–ï–ó–í–û–†–û–¢–ù–ê!\n"
            f"–í—Å—ñ –≤–∞—à—ñ –ª—ñ–∫–∏ —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –ü–û–í–ù–Ü–°–¢–Æ –í–ò–î–ê–õ–ï–ù–Ü!\n\n"
            f"–í–∏ –í–ü–ï–í–ù–ï–ù–Ü, —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚ö†Ô∏è –¢–ê–ö, –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï"), KeyboardButton("‚ùå –ù–Ü, —Å–∫–∞—Å—É–≤–∞—Ç–∏")]
            ], resize_keyboard=True, one_time_keyboard=True)
        )
        return CONFIRMING_DELETE_ALL
    
    async def handle_delete_all_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle delete all confirmation with double confirmation"""
        # Check if we're in final confirmation stage
        if context.user_data.get('final_delete_all_confirmation'):
            # Final confirmation stage
            if update.message.text == "‚ùå –ù–Ü, –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏":
                await update.message.reply_text("‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∞—à—ñ –ª—ñ–∫–∏ –≤ –±–µ–∑–ø–µ—Ü—ñ!")
                context.user_data.clear()
                await self.show_main_menu(update, context)
                return ConversationHandler.END
            
            if update.message.text != "üö® –ü–Ü–î–¢–í–ï–†–î–ñ–£–Æ –í–ò–î–ê–õ–ï–ù–ù–Ø":
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
                return CONFIRMING_DELETE_ALL
            
            # Actually delete all medicines
            user_id = update.effective_user.id
            deleted_count = self.db.delete_all_user_medicines(user_id)
            
            if deleted_count > 0:
                await update.message.reply_text(
                    f"‚úÖ –í–ò–î–ê–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û!\n\n"
                    f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –ª—ñ–∫—ñ–≤\n"
                    f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n\n"
                    f"–í–∞—à —Å–ø–∏—Å–æ–∫ –ª—ñ–∫—ñ–≤ —Ç–µ–ø–µ—Ä –ø—É—Å—Ç–∏–π."
                )
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ª—ñ–∫—ñ–≤.")
            
            context.user_data.clear()
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        else:
            # First confirmation stage
            if update.message.text == "‚ùå –ù–Ü, —Å–∫–∞—Å—É–≤–∞—Ç–∏":
                await update.message.reply_text("‚úÖ –°–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∞—à—ñ –ª—ñ–∫–∏ –∑–∞–ª–∏—à–∏–ª–∏—Å—è –Ω–∞ –º—ñ—Å—Ü—ñ.")
                await self.show_main_menu(update, context)
                return ConversationHandler.END
            
            if update.message.text != "‚ö†Ô∏è –¢–ê–ö, –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–ï":
                await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –û–±–µ—Ä—ñ—Ç—å –∑—ñ —Å–ø–∏—Å–∫—É.")
                return CONFIRMING_DELETE_ALL
            
            # SECOND CONFIRMATION - Double safety
            user_id = update.effective_user.id
            medicines = self.db.get_user_medicines(user_id)
            total_medicines = len(medicines)
            
            await update.message.reply_text(
                f"üö® –û–°–¢–ê–ù–ù–Ø –ü–ï–†–ï–í–Ü–†–ö–ê!\n\n"
                f"–í–∏ —Ç–æ—á–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü {total_medicines} –ª—ñ–∫—ñ–≤?\n\n"
                f"‚ö†Ô∏è –ü–Ü–°–õ–Ø –ù–ê–¢–ò–°–ö–ê–ù–ù–Ø '–ü–Ü–î–¢–í–ï–†–î–ñ–£–Æ' \n"
                f"–í–°–Ü –í–ê–®–Ü –õ–Ü–ö–ò –ë–£–î–£–¢–¨ –í–ò–î–ê–õ–ï–ù–Ü –ù–ê–ó–ê–í–ñ–î–ò!\n\n"
                f"–¶–µ –≤–∞—à –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å –ø–µ—Ä–µ–¥—É–º–∞—Ç–∏!",
                reply_markup=ReplyKeyboardMarkup([
                    [KeyboardButton("üö® –ü–Ü–î–¢–í–ï–†–î–ñ–£–Æ –í–ò–î–ê–õ–ï–ù–ù–Ø")],
                    [KeyboardButton("‚ùå –ù–Ü, –Ω–µ –≤–∏–¥–∞–ª—è—Ç–∏")]
                ], resize_keyboard=True, one_time_keyboard=True)
            )
            
            # Store that we're in final confirmation
            context.user_data['final_delete_all_confirmation'] = True
            return CONFIRMING_DELETE_ALL
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show main menu"""
        keyboard = [
            [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏")],
            [KeyboardButton("üìã –ú–æ—ó –ª—ñ–∫–∏")],
            [KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–∫–∏")],
            [KeyboardButton("üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å")],
            [KeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=reply_markup
        )
    
    async def handle_add_medicine(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start adding medicine process"""
        if not await check_user_access(update, context):
            return ConversationHandler.END
        
        # Clear any previous medicine data
        context.user_data.clear()
        
        keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üíä –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫—ñ–≤\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ª—ñ–∫—ñ–≤:",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_NAME
    
    async def handle_medicine_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine name input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        medicine_name = update.message.text.strip()
        if not medicine_name or len(medicine_name) > 100:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –ª—ñ–∫—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ù–∞–∑–≤–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 1 –¥–æ 100 —Å–∏–º–≤–æ–ª—ñ–≤."
            )
            return ADDING_MEDICINE_NAME
        
        # Store medicine name in context
        context.user_data['medicine_name'] = medicine_name
        
        # Show time input options
        keyboard = [
            [KeyboardButton("–†–∞–Ω–æ–∫ 08:00"), KeyboardButton("–î–µ–Ω—å 14:00"), KeyboardButton("–í–µ—á—ñ—Ä 20:00")],
            [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üíä {medicine_name}\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•\n"
            "–ü—Ä–∏–∫–ª–∞–¥–∏: 08:00, 14:30, 20:15\n\n"
            "–ê–±–æ –æ–±–µ—Ä—ñ—Ç—å –≥–æ—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_TIME
    
    async def handle_medicine_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine time input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        time_input = update.message.text
        
        # Handle preset times
        if time_input == "–†–∞–Ω–æ–∫ 08:00":
            time_str = "08:00"
        elif time_input == "–î–µ–Ω—å 14:00":
            time_str = "14:00"
        elif time_input == "–í–µ—á—ñ—Ä 20:00":
            time_str = "20:00"
        else:
            time_str = validate_time_format(time_input)
        
        if not time_str:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 08:00"
            )
            return ADDING_MEDICINE_TIME
        
        # Store time in context
        context.user_data['medicine_time'] = time_str
        
        keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üíä {context.user_data['medicine_name']}\n"
            f"üïê {time_str}\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –¥–æ–∑—É (–ø—Ä–∏–∫–ª–∞–¥: 1 —Ç–∞–±–ª–µ—Ç–∫–∞):",
            reply_markup=reply_markup
        )
        return ADDING_MEDICINE_DOSAGE
    
    async def handle_medicine_dosage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine dosage input"""
        if update.message.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        
        dosage = validate_dosage(update.message.text)
        
        if not dosage:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–∑–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n"
                "–ü—Ä–∏–∫–ª–∞–¥: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 2 –∫–∞–ø—Å—É–ª–∏, 5 –º–ª"
            )
            return ADDING_MEDICINE_DOSAGE
        
        # Store dosage in context
        context.user_data['medicine_dosage'] = dosage
        
        # Show confirmation
        keyboard = [
            [KeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏")],
            [KeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏"), KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è:\n\n"
            f"üíä {context.user_data['medicine_name']}\n"
            f"üïê {context.user_data['medicine_time']}\n"
            f"üíä {dosage}",
            reply_markup=reply_markup
        )
        return CONFIRMING_MEDICINE
    
    async def handle_medicine_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle medicine confirmation"""
        choice = update.message.text
        
        if choice == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        elif choice == "‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏":
            # Go back to name input
            keyboard = [[KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üíä –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–∫—ñ–≤\n\n"
                "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ª—ñ–∫—ñ–≤:",
                reply_markup=reply_markup
            )
            return ADDING_MEDICINE_NAME
        elif choice == "‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏":
            # Save to database
            user_id = update.effective_user.id
            
            # Check if we already have a medicine_id (adding more times)
            if 'medicine_id' not in context.user_data:
                # First time - create new medicine
                medicine_id = self.db.add_medicine(
                    user_id, 
                    context.user_data['medicine_name']
                )
                context.user_data['medicine_id'] = medicine_id
            else:
                # Adding more times - reuse existing medicine
                medicine_id = context.user_data['medicine_id']
            
            if medicine_id:
                success = self.db.add_reminder(
                    medicine_id,
                    context.user_data['medicine_time'],
                    context.user_data['medicine_dosage']
                )
                
                if success:
                    keyboard = [
                        [KeyboardButton("–¢–∞–∫"), KeyboardButton("–ù—ñ")],
                        [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
                    ]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    
                    await update.message.reply_text(
                        "‚úÖ –õ—ñ–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!\n\n"
                        "–î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —á–∞—Å –¥–ª—è —Ü–∏—Ö –ª—ñ–∫—ñ–≤?",
                        reply_markup=reply_markup
                    )
                    return ADDING_MORE_TIMES
                else:
                    await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                    await self.show_main_menu(update, context)
                    return ConversationHandler.END
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                await self.show_main_menu(update, context)
                return ConversationHandler.END
    
    async def handle_adding_more_times(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle adding more reminder times"""
        choice = update.message.text
        
        if choice == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" or choice == "–ù—ñ":
            # Clear context when finishing
            context.user_data.clear()
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        elif choice == "–¢–∞–∫":
            # Continue with same medicine, add another time
            keyboard = [
                [KeyboardButton("–†–∞–Ω–æ–∫ 08:00"), KeyboardButton("–î–µ–Ω—å 14:00"), KeyboardButton("–í–µ—á—ñ—Ä 20:00")],
                [KeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"üíä {context.user_data['medicine_name']}\n\n"
                "–í–≤–µ–¥—ñ—Ç—å —â–µ –æ–¥–∏–Ω —á–∞—Å:",
                reply_markup=reply_markup
            )
            return ADDING_MEDICINE_TIME
        else:
            # Clear context when finishing
            context.user_data.clear()
            await self.show_main_menu(update, context)
            return ConversationHandler.END
    
    async def handle_show_medicines(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show user's medicines"""
        if not await check_user_access(update, context):
            return
        
        user_id = update.effective_user.id
        medicines = self.db.get_user_medicines(user_id)
        
        message = format_medicine_list(medicines)
        
        # Create keyboard based on whether user has medicines
        if medicines:
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ")],
                [KeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ª—ñ–∫–∏")],
                [KeyboardButton("‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –ª—ñ–∫–∏")],
                [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
        else:
            keyboard = [
                [KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —â–µ")],
                [KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]
            ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, reply_markup=reply_markup)
    
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Show help information"""
        help_text = (
            "‚ùì –î–æ–≤—ñ–¥–∫–∞ –ø–æ –ú–µ–¥–∏—á–Ω–æ–º—É –ü–æ–º—ñ—á–Ω–∏–∫—É\n\n"
            "üìã –û–°–ù–û–í–ù–Ü –§–£–ù–ö–¶–Ü–á:\n\n"
            
            "‚ûï –î–û–î–ê–¢–ò –õ–Ü–ö–ò\n"
            "‚Ä¢ –î–æ–¥–∞—î –Ω–æ–≤—ñ –ª—ñ–∫–∏ –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º–∏\n"
            "‚Ä¢ –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∫—ñ–ª—å–∫–∞ —á–∞—Å—ñ–≤ –¥–ª—è –æ–¥–Ω–∏—Ö –ª—ñ–∫—ñ–≤\n"
            "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É—î –≥–Ω—É—á–∫—ñ —Ñ–æ—Ä–º–∞—Ç–∏ —á–∞—Å—É\n\n"
            
            "üìã –ú–û–á –õ–Ü–ö–ò\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ª—ñ–∫–∏\n"
            "‚Ä¢ –ì—Ä—É–ø—É—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø–æ –ª—ñ–∫–∞–º\n"
            "‚Ä¢ –°–æ—Ä—Ç—É—î –∑–∞ —á–∞—Å–æ–º\n\n"
            
            "üóëÔ∏è –í–ò–î–ê–õ–ò–¢–ò –õ–Ü–ö–ò\n"
            "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å\n"
            "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—ñ–ª–∏—Ö –ª—ñ–∫—ñ–≤\n"
            "‚Ä¢ –í–∏–¥–∞–ª–µ–Ω–Ω—è –í–°–Ü–• –ª—ñ–∫—ñ–≤ (–ø–æ–¥–≤—ñ–π–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)\n\n"
            
            "üåç –ó–ú–Ü–ù–ò–¢–ò –ß–ê–°–û–í–ò–ô –ü–û–Ø–°\n"
            "‚Ä¢ –í—ñ–¥–µ–Ω—å (UTC+1/+2) - –ê–≤—Å—Ç—Ä—ñ—è\n"
            "‚Ä¢ –ö–∏—ó–≤, –•–∞—Ä–∫—ñ–≤ (UTC+2/+3) - –£–∫—Ä–∞—ó–Ω–∞\n"
            "‚Ä¢ –°—ñ–µ—Ç–ª (UTC-8/-7) - –°–®–ê, –∑–∞—Ö—ñ–¥\n"
            "‚Ä¢ –°—Ç–∞—Ä–æ–±—ñ–ª—å—Å—å–∫ (UTC+3) - –æ–∫—É–ø–æ–≤–∞–Ω–∞ —Ç–µ—Ä–∏—Ç–æ—Ä—ñ—è\n"
            "‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∞–¥–∞–ø—Ç—É—é—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n"
            
            "‚è∞ –§–û–†–ú–ê–¢–ò –ß–ê–°–£:\n"
            "‚Ä¢ 8 ‚Üí 08:00\n"
            "‚Ä¢ 830 ‚Üí 08:30\n"
            "‚Ä¢ 1245 ‚Üí 12:45\n"
            "‚Ä¢ 08:00, 14:30, 20:15\n\n"
            
            "üíä –§–û–†–ú–ê–¢–ò –î–û–ó–ò:\n"
            "‚Ä¢ 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 2 –∫–∞–ø—Å—É–ª–∏\n"
            "‚Ä¢ 5 –º–ª, –ø—ñ–≤ —Ç–∞–±–ª–µ—Ç–∫–∏\n"
            "‚Ä¢ 1/2 —Ç–∞–±–ª–µ—Ç–∫–∏\n\n"
            
            "üîê –ë–ï–ó–ü–ï–ö–ê:\n"
            "‚Ä¢ –¢—ñ–ª—å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ\n"
            "‚Ä¢ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó\n\n"
            
            "üíä –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—Ö–æ–¥—è—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É!"
        )
        
        keyboard = [[KeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(help_text, reply_markup=reply_markup)
    
    async def handle_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle conversation cancellation"""
        await self.show_main_menu(update, context)
        return ConversationHandler.END
    
    async def handle_unknown(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle unknown messages"""
        if not await check_user_access(update, context):
            return
        
        # Check for main menu buttons
        text = update.message.text
        
        if text == "‚ûï –î–æ–¥–∞—Ç–∏ –ª—ñ–∫–∏" or text == "‚ûï –î–æ–¥–∞—Ç–∏ —â–µ":
            # This should be handled by ConversationHandler, but just in case
            return await self.handle_add_medicine(update, context)
        elif text == "üìã –ú–æ—ó –ª—ñ–∫–∏":
            await self.handle_show_medicines(update, context)
        elif text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ª—ñ–∫–∏" or text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ –ª—ñ–∫–∏":
            return await self.handle_delete_medicine(update, context)
        elif text == "‚ö†Ô∏è –í–∏–¥–∞–ª–∏—Ç–∏ –í–°–Ü –ª—ñ–∫–∏":
            return await self.handle_delete_all_medicines(update, context)
        elif text == "üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å":
            return await self.handle_change_timezone(update, context)
        elif text == "‚ùì –î–æ–ø–æ–º–æ–≥–∞":
            await self.handle_help(update, context)
        elif text == "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é":
            await self.show_main_menu(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —Ä–æ–∑—É–º—ñ—é –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é."
            )
            await self.show_main_menu(update, context)
    
    def run(self):
        """Run the bot"""
        self.logger.info("Starting Medicine Reminder Bot...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

def main():
    """Main function"""
    bot = MedicineBot()
    bot.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")
    except Exception as e:
        logging.error(f"Fatal error: {e}")
        sys.exit(1)